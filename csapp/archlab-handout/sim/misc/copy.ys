# This is a y86-64 Assembly code written by fanesemyk, as Part A of CSAPP archlab
# 初始化
		.pos 0
		irmovq stack, %rsp
		call main
		halt
	.align 8
# Source block
src:
		.quad 0x00a
		.quad 0x0b0
		.quad 0xc00

# Destination block
dest:
		.quad 0x111
		.quad 0x222
		.quad 0x333

main: 
		irmovq src, %rdi   # 参数1
		irmovq dest, %rsi  # 参数2
		irmovq $3, %rdx    # 参数3
		call copy_block
		ret

# long copy_block(long* src, long* dest, long len)
copy_block:
		pushq %r12              #save r12, for it is callee-save
		pushq %r13              #save r13, for storing integer 1
		pushq %r14		        #save r14, for storing integer 8
		irmovq $1, %r13
		irmovq $8, %r14
		irmovq $0, %rax         #result = 0
		jmp loop_test           #jump to the start point of loop
loop:
		mrmovq (%rdi), %r12   
		addq %r14, %rdi         #rdi++
		rmmovq %r12, (%rsi)     #*rsi = *(rdi - 1)
		addq %r14, %rsi         #rsi++
		xorq %r12, %rax
		subq %r13, %rdx         #len --
loop_test:
		andq %rdx, %rdx         # while(len > 0)
		jg loop
		popq %r14
		popq %r13
		popq %r12
		ret

		.pos 0x300
stack:
